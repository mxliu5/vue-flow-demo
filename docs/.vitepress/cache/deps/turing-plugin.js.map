{
  "version": 3,
  "sources": ["../../../../node_modules/turing-plugin/lib/plugins/data/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/time/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/number/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/string/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/text/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/file/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/store/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/browser/index.ts", "../../../../node_modules/turing-plugin/lib/plugins/reg/index.ts"],
  "sourcesContent": ["class DataC {\r\n  // 生成uuid\r\n  generateUUID(): string {\r\n    let d = new Date().getTime();\r\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(\r\n      c\r\n    ) {\r\n      const r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      return (c == \"x\" ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n    return uuid;\r\n  }\r\n  // 深拷贝\r\n  cloneDeep (obj: any) {\r\n    const objArray: any = Array.isArray(obj) ? [] : {};\r\n    if (obj && typeof obj === \"object\") {\r\n      for (const key in obj) {\r\n        if (obj[key] && typeof obj[key] === \"object\") {\r\n          objArray[key] = this.cloneDeep(obj[key]);\r\n        } else {\r\n          objArray[key] = obj[key];\r\n        }\r\n      }\r\n    }\r\n    return objArray;\r\n  }\r\n  // 匹配数组中特定value值对应的值\r\n  getItemByValue (arr: Array<any>, value: number | string , valueKey = 'value' ) {\r\n    let item: any = {}\r\n    arr.forEach((elem: any) => {\r\n      if (elem[valueKey] === value) {\r\n        item = this.cloneDeep(elem)\r\n      }\r\n    })\r\n    return item\r\n  }\r\n  // 简单数组去重\r\n  removeDuplicates (arr: Array<number | string>) {\r\n    return Array.from(new Set(arr))\r\n  }\r\n  // 对象数组去重\r\n  filterArray(arr: Array<any>, key: string, key2 ? : string): Array<any> {\r\n    //arr需要去重的对象数组;key为去重的标识;key2 为第二个去重的标识\r\n    const newArr: any[] = [];\r\n    const newArr2: any[] = [];\r\n    if (!key2) {\r\n      arr.forEach((elem: any) => {\r\n        if (newArr.indexOf(elem[key]) === -1) {\r\n          newArr.push(elem[key]);\r\n          newArr2.push(elem);\r\n        }\r\n      });\r\n    } else {\r\n      arr.forEach((elem) => {\r\n        if (newArr2.findIndex(val => val[key] === elem[key]) === -1 || newArr2.findIndex(val => val[key2] === elem[key2]) === -1) {\r\n          newArr2.push(elem)\r\n        }\r\n      })\r\n    }\r\n    return newArr2;\r\n  }\r\n  // 空值包括数组\r\n  isEmpty (value: any) {\r\n    if (Array.isArray(value)) { // 数组为空\r\n      return value.length === 0\r\n    } else if(JSON.stringify(value) === '{}') { // 对象为空\r\n      return true\r\n    } else {\r\n      return !(value || value === 0 || value === false)\r\n    }\r\n  }\r\n  // 随机获取数组中的n个元素值\r\n  getRandomArrayElements = (arr: Array<any>, count: number) => {\r\n    if (arr.length > count) {\r\n      const shuffled = arr.slice(0)\r\n      let i = arr.length\r\n      let min = i - count\r\n      while (i-- > min) {\r\n        let index = Math.floor((i + 1) * Math.random());\r\n        [shuffled[index], shuffled[i]] = [shuffled[i], shuffled[index]]\r\n      }\r\n      return shuffled.slice(min)\r\n    } else {\r\n      return arr\r\n    }\r\n  }\r\n  // 数组冒泡排序\r\n  bubbleSort(arr: Array<number>, type: string = 'asc') {\r\n    let len = arr.length;\r\n    for (let i = 0; i < len - 1; i++) {\r\n      for (let j = 0; j < len - 1 - i; j++) {\r\n        const bool = type === 'asc' ? arr[j] > arr[j + 1] : arr[j] < arr[j + 1]\r\n        if (bool) {\r\n          let temp = arr[j];\r\n          arr[j] = arr[j + 1];\r\n          arr[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n  // 找出数组中最大值\r\n  getMax (arr: Array<number>) {\r\n    if (this.isEmpty(arr)) {\r\n      return 0\r\n    } else {\r\n      const max = arr.reduce((a, b) => Math.max(a, b))\r\n      return max\r\n    }\r\n  }\r\n  // 找出数组中最小值\r\n  getMin (arr: Array<number>) {\r\n    if (this.isEmpty(arr)) {\r\n      return 0\r\n    } else {\r\n      const min = arr.reduce((a, b) => Math.min(a, b))\r\n      return min\r\n    }\r\n  }\r\n  // 判断是否为{\"a\": 1, \"b\": 2} 或 {a: 1, b: 2}这种可转成对象的格式，即是否可通过JOSN.parse转成对象,如果是转成对象并返回，否则返回null\r\n  safeObject (str: string, defaultRet: any = null) {\r\n    let ret = defaultRet\r\n    try {\r\n      // eslint-disable-next-line no-new-func\r\n      ret = (new Function('return ' + str))()\r\n    } catch (ex) { /* Ignore */ }\r\n    return ret\r\n  }\r\n}\r\n\r\nconst dataC = new DataC()\r\nexport default dataC", "// 定义一个时间类\r\nimport dataC from '../data/index.ts'\r\n\r\ntype timeType = Date | string | number // time支持字符串形式的时间格式、日期形式的格式以及时间戳\r\n\r\nclass TimeC {\r\n  // 年份获取\r\n  getYear (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getFullYear()\r\n  }\r\n  // 月份获取\r\n  getMonth (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getMonth() + 1\r\n  }\r\n  // 日期获取\r\n  getDate (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getDate()\r\n  }\r\n  // 周获取 0代表星期天\r\n  getDay (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getDay()\r\n  }\r\n  // 小时获取\r\n  getHours (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getHours()\r\n  }\r\n  // 分钟获取\r\n  getMinutes (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getMinutes()\r\n  }\r\n  // 秒获取\r\n  getSeconds (time: timeType) {\r\n    const date = new Date(time)\r\n    return date.getSeconds()\r\n  }\r\n  // 日期/时间的格式化\r\n  format(value: timeType, type: string) {\r\n    // 如果值为空则返回空\r\n    if (dataC.isEmpty(value)) {\r\n      return \"\"\r\n    }\r\n    const D = new Date(value)\r\n    const Y = D.getFullYear()\r\n    const M = (D.getMonth() + 1).toString().padStart(2, '0');\r\n    const d = D.getDate().toString().padStart(2, '0');\r\n    const h = D.getHours().toString().padStart(2, '0');\r\n    const m = D.getMinutes().toString().padStart(2, '0');\r\n    const s = D.getSeconds().toString().padStart(2, '0');\r\n    if (type === 'YYYY') {\r\n      return `${Y}`\r\n    } else if (type === 'YYYY-MM') {\r\n      return `${Y}-${M}`\r\n    } else if (type === 'YYYY-MM-DD') {\r\n      return `${Y}-${M}-${d}`\r\n    } else if (type == 'YYYY-MM-DD hh:mm') {\r\n      return `${Y}-${M}-${d} ${h}:${m}`\r\n    } else if (type == 'YYYY-MM-DD hh:mm:ss') {\r\n      return `${Y}-${M}-${d} ${h}:${m}:${s}`\r\n    } else if (type === 'YYYY/MM') {\r\n      return `${Y}/${M}`\r\n    } else if (type == 'YYYY/MM/DD') {\r\n      return `${Y}/${M}/${d}`\r\n    } else if (type == 'YYYY/MM/DD hh:mm') {\r\n      return `${Y}/${M}/${d} ${h}:${m}`\r\n    } else if (type == 'YYYY/MM/DD hh:mm:ss') {\r\n      return `${Y}/${M}/${d} ${h}:${m}:${s}`\r\n    } else {\r\n      return `${Y}-${M}-${d} ${h}:${m}:${s}`\r\n    }\r\n  }\r\n  // 获取某月的总天数\r\n  getTotalDaysOfMonth(year: number, month: number) {\r\n    return new Date(year, month, 0).getDate();\r\n  }\r\n  // 判断是否为闰年\r\n  isLeapYear(year: number) {\r\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\r\n  }\r\n  // 比较两个日期大小\r\n  compareDates(d1: timeType, d2: timeType) {\r\n    const date1 = new Date(d1)\r\n    const date2 = new Date(d2)\r\n    if (date1 > date2) { // 大于\r\n      return 1;\r\n    } else if (date1 < date2) { // 小于\r\n      return -1;\r\n    } else { // 等于\r\n      return 0;\r\n    }\r\n  }\r\n  // 生成n天内的日期/时间范围\r\n  createRangeByDay (dayCount: number, withTime ? : boolean) {\r\n    const today = new Date()\r\n    const prevDay = new Date(today);\r\n    prevDay.setDate(today.getDate() - dayCount + 1);\r\n    // 获取此刻的时分秒\r\n    const hour = today.getHours();\r\n    const minute = today.getMinutes();\r\n    const second = today.getSeconds();\r\n    const getReal = (val: number) => {\r\n      return val >= 10 ? val : `0${val}`\r\n    }\r\n    const nowTime = `${getReal(hour)}:${getReal(minute)}:${getReal(second)}`\r\n    // 开始日期结束日期\r\n    const dateFormat = 'YYYY-MM-DD'\r\n    let startDate = this.format(prevDay, dateFormat)\r\n    let endDate = this.format(today, dateFormat)\r\n    // 包含时间[从开始时间的0点到此刻]\r\n    if (withTime) {\r\n      startDate = `${startDate} 00:00:00`\r\n      endDate = `${endDate} ${nowTime}`\r\n    }\r\n    return [startDate, endDate]\r\n  }\r\n  // 获取近一年的天数\r\n  getDaysInLastYear () {\r\n    const today: any = new Date();\r\n    const lastYear: any = new Date(today);\r\n    lastYear.setFullYear(lastYear.getFullYear() - 1);\r\n    return Math.ceil((today - lastYear) / (1000 * 60 * 60 * 24));\r\n  }\r\n  // 获取近一个月的天数\r\n  getDaysInLastMonth () {\r\n    const today: any  = new Date();\r\n    const lastMonth: any  = new Date(today);\r\n    lastMonth.setMonth(lastMonth.getMonth() - 1);\r\n    return Math.ceil((today - lastMonth) / (1000 * 60 * 60 * 24));\r\n  }\r\n}\r\nconst timeC = new TimeC()\r\nexport default timeC", "class NumberC {\r\n  // 数字转中文 lower：中文小写 upper：中文大写\r\n  numberToChinese(num: number, upperOrlower: string) {\r\n    upperOrlower = upperOrlower || 'lower';\r\n        // 定义中文数字\r\n        let chineseNumbers = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\r\n        // 定义中文单位\r\n        let chineseUnits = ['', '十', '百', '千', '万', '十', '百', '千', '亿'];\r\n        if (upperOrlower === 'upper') {\r\n            chineseNumbers = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];\r\n            chineseUnits = ['', '拾', '佰', '仟', '万', '拾', '佰', '仟', '亿'];\r\n        }\r\n        let numberString = num.toString();\r\n        let [integerPart, decimalPart] = numberString.split('.');\r\n        let integerArray = integerPart.split('').map(Number);\r\n\r\n        // 构建整数部分的中文表示\r\n        let chineseInteger = '';\r\n        for (let i = 0; i < integerArray.length; i++) {\r\n            let digit = integerArray[i];\r\n            let unit = chineseUnits[integerArray.length - i - 1];\r\n            if (digit === 0) {\r\n                if (i !== integerArray.length - 1 && integerArray[i + 1] !== 0) {\r\n                    chineseInteger += chineseNumbers[digit];\r\n                }\r\n            } else {\r\n                chineseInteger += chineseNumbers[digit] + unit;\r\n            }\r\n        }\r\n        // 构建小数部分的中文表示 \r\n        let chineseDecimal = '';\r\n        if (decimalPart) {\r\n            let decimalArray = decimalPart.split('').map(Number);\r\n            for (let i = 0; i < decimalArray.length; i++) {\r\n                chineseDecimal += chineseNumbers[decimalArray[i]];\r\n            }\r\n        }\r\n        // 拼接整数部分和小数部分的中文表示，并返回结果\r\n        let result = chineseInteger + (decimalPart ? '点' + chineseDecimal : '');\r\n        return result || '零';\r\n  }\r\n  // 随机生成n个数字，并且n个数字不能重复\r\n  generateUniqueRandomNumber (count: number) {\r\n    let numbers = Array.from({ length: 10 }, (_, i) => i);\r\n     // 打乱数组顺序\r\n     for (let i = numbers.length - 1; i > 0; i--) {\r\n         const j = Math.floor(Math.random() * (i + 1));\r\n         [numbers[i], numbers[j]] = [numbers[j], numbers[i]];\r\n     }\r\n     // 取数组前 count 个元素拼接成字符串\r\n     let result = numbers.slice(0, count).join('');\r\n     return result;\r\n  }\r\n  // 页面上一些数字展示，超过1000的，展示为1,236格式，超过10000的，展示为1w\r\n  getNumberText (count: any) {\r\n    if (count && typeof count === 'number') {\r\n      if (count >= 10000) {\r\n          const num = (count / 10000).toFixed(1)\r\n          return `${num}w`\r\n      } else {\r\n          return count.toLocaleString() //将数字转换为带有千位分隔符的字符串\r\n      }\r\n    } else {\r\n        return 0\r\n    }\r\n  };\r\n}\r\n\r\n\r\nconst numberC = new NumberC()\r\nexport default numberC", "class StringC {\r\n  // 转大写\r\n  toUpperCase(str: string) {\r\n    if (str && typeof str === 'string') {\r\n      return str.toUpperCase();\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n  // 转小写\r\n  toLowerCase(str: string) {\r\n    if (str && typeof str === 'string') {\r\n      return str.toLowerCase();\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n  // 去除字符串两端的空格\r\n  trim (str: string) {\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n  }\r\n  // 替换字符串中的某个字符或子串\r\n  replaceAll(str: string, searchValue: string, replaceValue: string) {\r\n    return str.split(searchValue).join(replaceValue);\r\n  }\r\n  // 获取查询字符串\r\n  getSearchParamsValue (url: string, key: string) {\r\n   if (url.indexOf('?') === -1) {\r\n     return null;\r\n   }\r\n   const params = url.split('?')[1];\r\n   const paramsArr = params.split('&');\r\n   for (let i=0;i<paramsArr.length;i++) {\r\n     let paramItem = paramsArr[i];\r\n     if (key === paramItem.split('=')[0]) {\r\n       return paramItem.split('=')[1];\r\n     }\r\n   }\r\n  }\r\n  // 修改查询字符串的某个值 url必须要是一个完整的url地址\r\n  setSearchParamsValue (url: string, key: string, value: string) {\r\n   const urlObj = new URL(url);\r\n   const params = urlObj.searchParams;\r\n   params.set(key, value);\r\n   return urlObj.toString();\r\n  }\r\n  // url转对象\r\n  queryStringToObject (query: string) { \r\n    // 得到?后的字符串\r\n    if (query.includes('?')) {\r\n      const arr = query.split('?')\r\n      query = arr[1]\r\n    } else {\r\n      return null\r\n    }\r\n    // 将查询字符串分割成键值对数组\r\n    let pairs = query.split('&');\r\n    // 将数组转换为对象\r\n    let result = pairs.reduce((prev: any, current: any) => {\r\n      // 分割键和值\r\n      let [key, value] = current.split('=');\r\n      // 解码键和值\r\n      key = decodeURIComponent(key);\r\n      value = decodeURIComponent(value);\r\n      // 设置到对象属性中\r\n      prev[key] = value;\r\n      return prev;\r\n    }, {});\r\n    return result;\r\n  }\r\n  // 对象转url\r\n  objectToQueryString (obj: any) {\r\n    return Object.keys(obj)\r\n        .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`)\r\n        .join('&');\r\n  }\r\n}\r\n\r\n\r\nconst stringC = new StringC()\r\nexport default stringC", "// 定义一个文本类\r\nclass TextC {\r\n  // 复制\r\n  copyText (beCopyText: string, callback: Function) {\r\n    // 创建一个input来存放被复制的文字\r\n    const input = document.createElement('input')\r\n    document.body.appendChild(input)\r\n    input.setAttribute('value', beCopyText)\r\n    input.select()\r\n    if (document.execCommand('copy')) {\r\n      document.execCommand('copy')\r\n      callback() // 复制成功后的回调\r\n    }\r\n    document.body.removeChild(input)\r\n  }\r\n  // 文本框自动聚焦 如果start和end相等就是定位光标的位置，如果不相等就是选种从start到end间的字符\r\n  setSelectionRange (inputEl: any, selectionStart: number, selectionEnd ? : number) {\r\n    if (selectionEnd === undefined) {\r\n      selectionEnd = selectionStart\r\n    }\r\n    if (inputEl.setSelectionRange) {\r\n      inputEl.focus()\r\n      inputEl.setSelectionRange(selectionStart, selectionEnd)\r\n    } else if (inputEl.createTextRange) {\r\n      var range = inputEl.createTextRange()\r\n      range.collapse(true)\r\n      range.moveEnd('character', selectionEnd)\r\n      range.moveStart('character', selectionStart)\r\n      range.select()\r\n    }\r\n  }\r\n  // 查找并替换敏感词\r\n  replaceSensitiveWords (text: string, sensitiveWords: Array<string>, callback: any) {\r\n    const regex = new RegExp(sensitiveWords.join('|'), 'gi');\r\n    const highlightedText = text.replace(regex, callback); // callback：对匹配到的关键词进行替换的操作\r\n    return highlightedText;\r\n  }\r\n}\r\n  \r\nconst textC = new TextC()\r\nexport default textC", "class FileC {\r\n    // 获取文件后缀\r\n    getFileSuffix(value: string): string {\r\n      const specialList = [\"tar.gz\"]; //特殊文件后缀集合\r\n      //查找文件后缀是否为特殊后缀\r\n      let special_suffix = \"\";\r\n      specialList.forEach((str: string) => {\r\n        const Index = value.indexOf(str);\r\n        if (Index > -1 && Index + str.length === value.length) {\r\n          special_suffix = str;\r\n        }\r\n      });\r\n      //正常文件后缀\r\n      const arr = value.split(\".\");\r\n      const last = arr[arr.length - 1];\r\n      let suffix = \"\";\r\n      if (special_suffix) {\r\n        suffix = special_suffix;\r\n      } else {\r\n        suffix = `${last}`;\r\n      }\r\n      return suffix;\r\n    }\r\n    // 下载文件\r\n    downloadFun(url: string, fileName: string) {\r\n      const link = document.createElement(\"a\");\r\n      link.style.display = \"none\";\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n}\r\n\r\nconst fileC = new FileC()\r\nexport default fileC", "// 定义一个存储类 \r\nclass StoreC {\r\n  // 设置cookie expiresTime: 超时时间\r\n  setCookie(key: string, value: string, expiresTime?: number) {\r\n    const exdate:any = new Date()\r\n    exdate.setTime(exdate.getTime() + expiresTime)\r\n    let date = ''\r\n    if(expiresTime){\r\n        date = `;expires=${exdate.toGMTString()}`\r\n    }else{\r\n        date = ''\r\n    }\r\n    document.cookie = `${key}=${escape(value)}${date}`\r\n  }\r\n  // 获取cookie\r\n  getCookie (key: string) {\r\n    let arr: any = new RegExp(`(^| )${key}=([^;]*)(;|$)`)\r\n    const reg: any = new RegExp(`(^| )${key}=([^;]*)(;|$)`)\r\n    if ((arr = document.cookie.match(reg))) {\r\n      return arr[2]\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  // 删除cookie\r\n  delCookie(key: string) {\r\n    const exp: any = new Date()\r\n    exp.setTime(exp.getTime() - 1)\r\n    const cval = this.getCookie(key)\r\n    if (cval) {\r\n      document.cookie = key + '=' + cval + ';expires=' + exp.toGMTString()\r\n    }\r\n  }\r\n  // 设置localStorage\r\n  setLocalstorage(key: string, value: string, expiresTime: number) {\r\n      expiresTime = expiresTime || 0;\r\n      let setObj = {\r\n          value,\r\n          expires: new Date().getTime() + expiresTime,\r\n          isExpires: expiresTime ? true : false\r\n      }\r\n      if (typeof window !== \"undefined\" && window.localStorage) {\r\n        window.localStorage.setItem(key, JSON.stringify(setObj));\r\n      }\r\n  }\r\n  // 获取localStorage\r\n  getLocalstorage(key: string) {\r\n    let storageValueString: any = ''\r\n    if (typeof window !== \"undefined\" && window.localStorage) {\r\n      storageValueString = window.localStorage.getItem(key);\r\n      if (!storageValueString) {\r\n        return null;\r\n      }\r\n      const storageValue = JSON.parse(storageValueString);\r\n      if (!storageValue.isExpires) {\r\n          return storageValue.value;\r\n      }\r\n      const expiresTime = storageValue.expires;\r\n      if (expiresTime && expiresTime < new Date().getTime()) {\r\n          window.localStorage.removeItem(key);\r\n          return null;\r\n      }\r\n      return storageValue.value;\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n}\r\n\r\nconst storeC = new StoreC()\r\nexport default storeC", "class BrowserC {\r\n  // 获取当前浏览器信息\r\n  getBrowserInfo() {\r\n    const userAgent = navigator.userAgent;\r\n    let browserName = \"Unknown\";\r\n    let version = \"Unknown\";\r\n  \r\n    if (/MSIE|Trident/.test(userAgent)) {\r\n      browserName = \"Internet Explorer\";\r\n      version = /MSIE (\\d+\\.\\d+);/.test(userAgent) ? RegExp.$1 : \"Unknown\";\r\n    } else if (/Firefox[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) {\r\n      browserName = \"Firefox\";\r\n      version = RegExp.$1;\r\n    } else if (/Chrome[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) {\r\n      browserName = \"Chrome\";\r\n      version = RegExp.$1;\r\n    } else if (/Opera[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) {\r\n      browserName = \"Opera\";\r\n      version = RegExp.$1;\r\n    } else if (/Safari[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) {\r\n      browserName = \"Safari\";\r\n      version = RegExp.$1;\r\n    } else if (/Edge[\\/\\s](\\d+\\.\\d+)/.test(userAgent)) {\r\n      browserName = \"Edge\";\r\n      version = RegExp.$1;\r\n    }\r\n  \r\n    return { browserName, version };\r\n  }\r\n  // 判断是否为手机端浏览器\r\n  isMobileBrowser () {\r\n    if (\r\n        window.navigator.userAgent.match(\r\n        /(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i,\r\n    )\r\n    ) {\r\n        return true; // 移动端\r\n    } else {\r\n        return false; // PC端\r\n    }\r\n  }\r\n  // 获取屏幕分辨率\r\n  getScreenResolution() {\r\n    return {\r\n      width: window.screen.width,\r\n      height: window.screen.height\r\n    };\r\n  }\r\n  // 获取浏览车窗口大小\r\n  getWindowSize() {\r\n    return {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    };\r\n  }\r\n  // 可视区滚动到底部\r\n  scrollToBottom (selector: any) {\r\n    const $el = document.querySelector(selector)\r\n    if ($el && $el.scrollHeight > 100) {\r\n      $el.scrollTop = $el.scrollHeight\r\n    }\r\n  }\r\n}\r\n\r\nconst browserC = new BrowserC()\r\nexport default browserC", "class RegC {\r\n    // 邮箱验证\r\n    email (val: string) {\r\n        const regx = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return regx.test(val);\r\n    }\r\n    // 手机号码验证\r\n    phone (val: string) {\r\n        const regx = /^1[3456789]\\d{9}$/;\r\n        return regx.test(val);\r\n    }\r\n    // url验证\r\n    url (val: string) {\r\n        const regx = /^(ftp|http|https):\\/\\/[^ \"]+$/;\r\n        return regx.test(val);\r\n    }\r\n    // 身份证号码验证\r\n    idCard (val: string) {\r\n        const regx = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\r\n        return regx.test(val);\r\n    }\r\n    // ip地址验证\r\n    ip (val: string) {\r\n        const regx = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/;\r\n        return regx.test(val);\r\n    }\r\n    // 业务中用到比较多的名称校验规则 由中文、英文、数字、中划线、下划线组成的名称\r\n    generalName (val: string) {\r\n        const regx = /^[a-zA-Z0-9_\\s\\-\\u4e00-\\u9fa5]+$/\r\n        return regx.test(val);\r\n    }\r\n    // 业务中用到比较多的英文名称校验规则 由英文、数字、中划线、下划线组成的英文名称\r\n    generalCode (val: string) {\r\n        const regx = /^[a-zA-Z0-9_-\\s]+$/\r\n        return regx.test(val);\r\n    }\r\n}\r\n\r\nconst regC = new RegC()\r\nexport default regC"],
  "mappings": "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",
  "names": []
}
